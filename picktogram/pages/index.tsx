import React, { useState, useContext, useEffect } from "react"
import axios from 'axios'
import { userInfoContext } from "@/src/context/userInfoContext"
import LocalStorage from '../util/localStorage'
import { GetServerSidePropsContext } from 'next'
import { clearUser, userFromRequest } from '@/src/auth/tokens'
import { useQuery, useInfiniteQuery } from "react-query"
import Head from 'next/head'
import Card from '@/components/card'
import Header from '@/components/header'


export const getServerSideProps = async(context : GetServerSidePropsContext) => {
  const data = await userFromRequest(context.req);

  if(!data?.token) {
      return {
        redirect : {
        destination : '/login',
        permanent : false
        }
      }
  }

  return {
      props : {
          user : data.user,
          token : data.token,
      }
    }
}

export default function Home( props : { user : {nickname : string}, token : string }) {
  const { user, setUser } = useContext(userInfoContext);

  const fetchBoards = async (token : string | undefined | null, page : number) => {
    try {
      const res = await axios.get(`http://13.209.193.45:3000/api/v1/articles?limit=10&page=${page}`, {
        headers : {
          Authorization : `Bearer ${token}`
        }
      })

      const data = await res.data.data
      return data
    } catch (err) {
      return err
    }
  }


  // const { data, isLoading } = useQuery(['boards'], () => fetchBoards(props.token, page))
 const { data, fetchNextPage, isLoading }  = useInfiniteQuery(['board'],
       ({pageParam = 1}) => fetchBoards(props.token, pageParam), {
        getNextPageParam : (lastPage) => {
           return lastPage.page == lastPage.totalPage ? undefined : Number(lastPage.page) + 1;
        }
      })

  const loggoutUser = () => {
      clearUser();
      LocalStorage.removeItem("token");
      LocalStorage.removeItem('user');
      window.location.reload()
  }

  if(isLoading) {
    return (
      <>
        <Header user={props.user}/>
        <div>Loading...</div>
      </>
    )
  }

  return (
    <>
      <Head>
        <title>picktogram</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header user={props.user}/>
      <main >
        hello world!
      </main>
      <div>
        <button onClick={loggoutUser}>logout</button>
      </div>
      <div style={{ margin : "0 auto", padding : "16px 20px", display : "grid", gridTemplateColumns : "1fr 1fr 1fr" , gap : '2rem'}}>
        {data?.pages.map((page, index) => (
          <React.Fragment key={index}>
            {page.list.map((post : any, index : any) => (
              <Card key={index} isLast={index === page.list.length -1} newLimit={() => fetchNextPage()} data={post}/>
            ))}
          </React.Fragment>
        ))}
      </div>
    </>
  )
}
